# Dependency Management Workflow
# Automated dependency updates, security patches, and compliance checking

name: Dependency Management

on:
  schedule:
    # Run weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - security
      auto_merge:
        description: 'Auto-merge if all checks pass'
        type: boolean
        default: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Security vulnerability scanning
  security-scan:
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.scan.outputs.vulnerabilities }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety pip-audit
      
      - name: Run Safety scan
        id: safety
        run: |
          safety check --json --output safety-report.json
          echo "safety-exit-code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: Run pip-audit
        id: pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          echo "pip-audit-exit-code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: Analyze vulnerability reports
        id: scan
        run: |
          VULNERABILITIES=false
          
          # Check Safety results
          if [ "${{ steps.safety.outputs.safety-exit-code }}" != "0" ]; then
            echo "Safety found vulnerabilities"
            VULNERABILITIES=true
          fi
          
          # Check pip-audit results
          if [ "${{ steps.pip-audit.outputs.pip-audit-exit-code }}" != "0" ]; then
            echo "pip-audit found vulnerabilities"
            VULNERABILITIES=true
          fi
          
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json
          retention-days: 30

  # Update Python dependencies
  update-python-deps:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pip-review pur
      
      - name: Update requirements files
        id: update-requirements
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"
          CHANGES_MADE=false
          
          # Update direct dependencies in pyproject.toml
          case $UPDATE_TYPE in
            "security")
              # Only update packages with known vulnerabilities
              if [ "${{ needs.security-scan.outputs.vulnerabilities-found }}" = "true" ]; then
                echo "Updating packages with security vulnerabilities..."
                # This would need custom logic to parse vulnerability reports
                # and update specific packages
                CHANGES_MADE=true
              fi
              ;;
            "patch")
              # Update to latest patch versions
              pur --patch pyproject.toml && CHANGES_MADE=true
              ;;
            "minor")
              # Update to latest minor versions
              pur --minor pyproject.toml && CHANGES_MADE=true
              ;;
            "major")
              # Update to latest major versions (requires review)
              pur pyproject.toml && CHANGES_MADE=true
              ;;
          esac
          
          echo "changes-made=$CHANGES_MADE" >> $GITHUB_OUTPUT
      
      - name: Test updated dependencies
        if: steps.update-requirements.outputs.changes-made == 'true'
        run: |
          # Install updated dependencies
          pip install -e ".[dev,analysis]"
          
          # Run basic import tests
          python -c "import pqc_iot_retrofit; print('Import test passed')"
          
          # Run quick test suite
          pytest tests/unit/ -x --tb=short
      
      - name: Check for breaking changes
        if: steps.update-requirements.outputs.changes-made == 'true'
        run: |
          # Run compatibility checks
          pip install pip-check-reqs
          pip-check-reqs --ignore-files=pyproject.toml .
          
          # Check for deprecated usage
          python -Wd -c "import pqc_iot_retrofit" 2>&1 | grep -i deprecat || true
      
      - name: Create pull request
        if: steps.update-requirements.outputs.changes-made == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update Python dependencies (${{ github.event.inputs.update_type || 'patch' }})
            
            - Updated dependencies using ${{ github.event.inputs.update_type || 'patch' }} strategy
            - All tests pass with updated dependencies
            - Security scan status: ${{ needs.security-scan.outputs.vulnerabilities-found == 'true' && 'vulnerabilities addressed' || 'no vulnerabilities found' }}
          title: '🔄 Dependency Update: ${{ github.event.inputs.update_type || 'patch' }} updates'
          body: |
            ## Dependency Update Summary
            
            This PR updates Python dependencies using the **${{ github.event.inputs.update_type || 'patch' }}** strategy.
            
            ### Changes Made
            - Updated dependencies in `pyproject.toml`
            - All tests pass with updated versions
            - Compatibility verified
            
            ### Security Status
            - Security scan: ${{ needs.security-scan.outputs.vulnerabilities-found == 'true' && '⚠️ Vulnerabilities found and addressed' || '✅ No vulnerabilities found' }}
            
            ### Testing
            - [x] Import tests pass
            - [x] Unit tests pass
            - [x] No breaking changes detected
            
            ### Review Notes
            Please review the dependency changes and approve if everything looks good.
            ${{ github.event.inputs.auto_merge == 'true' && 'This PR will auto-merge if all checks pass.' || '' }}
          branch: dependency-update-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated-pr
            ${{ needs.security-scan.outputs.vulnerabilities-found == 'true' && 'security' || '' }}

  # Update Docker base images
  update-docker-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for base image updates
        id: check-images
        run: |
          # Extract current base image
          CURRENT_IMAGE=$(grep "FROM python:" Dockerfile | head -1 | awk '{print $2}')
          echo "Current base image: $CURRENT_IMAGE"
          
          # Check for newer versions
          BASE_VERSION=$(echo $CURRENT_IMAGE | cut -d':' -f2 | cut -d'-' -f1)
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/python/tags/?page_size=100" | \
                          jq -r '.results[].name' | grep "^${BASE_VERSION%.*}.*-slim-" | head -1)
          
          if [ "$CURRENT_IMAGE" != "python:$LATEST_VERSION" ]; then
            echo "Update available: python:$LATEST_VERSION"
            echo "update-available=true" >> $GITHUB_OUTPUT
            echo "new-image=python:$LATEST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Base image is up to date"
            echo "update-available=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update Dockerfile
        if: steps.check-images.outputs.update-available == 'true'
        run: |
          NEW_IMAGE="${{ steps.check-images.outputs.new-image }}"
          
          # Update all Python base image references
          sed -i "s|FROM python:[^ ]*|FROM $NEW_IMAGE|g" Dockerfile
          
          echo "Updated Dockerfile with new base image: $NEW_IMAGE"
      
      - name: Test Docker build
        if: steps.check-images.outputs.update-available == 'true'
        run: |
          # Test that the image builds successfully
          docker build --target production -t test-image .
          
          # Test basic functionality
          docker run --rm test-image python -c "import pqc_iot_retrofit; print('Import test passed')"
      
      - name: Scan updated image for vulnerabilities
        if: steps.check-images.outputs.update-available == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-image
          format: 'json'
          output: 'trivy-report.json'
        continue-on-error: true
      
      - name: Create pull request for Docker updates
        if: steps.check-images.outputs.update-available == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update Docker base image to ${{ steps.check-images.outputs.new-image }}
            
            - Updated Python base image in Dockerfile
            - Verified build and basic functionality
            - Security scan completed
          title: '🐳 Docker Update: ${{ steps.check-images.outputs.new-image }}'
          body: |
            ## Docker Base Image Update
            
            This PR updates the Docker base image to the latest available version.
            
            ### Changes
            - Updated from current image to `${{ steps.check-images.outputs.new-image }}`
            - Verified successful build
            - Basic functionality tested
            
            ### Security
            - Trivy security scan completed
            - Review scan results in artifacts
            
            ### Testing
            - [x] Docker build succeeds
            - [x] Basic import test passes
            - [x] Security scan completed
          branch: docker-update-${{ github.run_number }}
          delete-branch: true
          labels: |
            docker
            dependencies
            automated-pr

  # License compliance checking
  license-compliance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pip-licenses licensecheck
      
      - name: Generate license report
        run: |
          # Generate comprehensive license report
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=csv --output-file=licenses.csv
          pip-licenses --format=html --output-file=licenses.html
          
          # Check for license compatibility
          licensecheck --format json > license-check.json
      
      - name: Check for license violations
        id: license-check
        run: |
          # Define allowed licenses
          ALLOWED_LICENSES=(
            "MIT"
            "Apache Software License"
            "BSD License"
            "Python Software Foundation License"
            "Mozilla Public License 2.0 (MPL 2.0)"
          )
          
          # Check for problematic licenses
          VIOLATIONS=$(python -c "
          import json
          
          with open('licenses.json') as f:
              licenses = json.load(f)
          
          allowed = $ALLOWED_LICENSES
          violations = []
          
          for pkg in licenses:
              license_name = pkg.get('License', 'Unknown')
              if license_name not in allowed and license_name != 'UNKNOWN':
                  violations.append(f\"{pkg['Name']}: {license_name}\")
          
          if violations:
              print('License violations found:')
              for v in violations:
                  print(f'  - {v}')
              exit(1)
          else:
              print('No license violations found')
          ")
          
          echo "license-check-exit-code=$?" >> $GITHUB_OUTPUT
      
      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            licenses.*
            license-check.json
          retention-days: 90
      
      - name: Create license violation issue
        if: steps.license-check.outputs.license-check-exit-code != '0'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'License compliance violations detected',
              body: `## License Compliance Issue
              
              The automated license compliance check has detected dependencies with incompatible licenses.
              
              ### Action Required
              - Review the license report in the workflow artifacts
              - Evaluate whether the flagged licenses are acceptable for this project
              - Consider replacing dependencies with compatible alternatives
              - Update the allowed licenses list if appropriate
              
              ### Report Location
              Check the latest dependency management workflow run for detailed license reports.`,
              labels: ['compliance', 'licenses', 'urgent']
            });

  # Dependency update summary
  summary:
    runs-on: ubuntu-latest
    needs: [security-scan, update-python-deps, update-docker-images, license-compliance]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerabilities found: ${{ needs.security-scan.outputs.vulnerabilities-found }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Python Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.update-python-deps.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.update-docker-images.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## License Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.license-compliance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any created pull requests" >> $GITHUB_STEP_SUMMARY
          echo "- Address any license compliance issues" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor security reports" >> $GITHUB_STEP_SUMMARY