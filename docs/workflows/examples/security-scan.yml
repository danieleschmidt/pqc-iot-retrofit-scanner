name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'Dockerfile'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # SAST Scanning
  # ==========================================
  sast:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep
    
    - name: Run Bandit SAST
      run: |
        bandit -r src/ -f sarif -o bandit-results.sarif
      continue-on-error: true
    
    - name: Upload Bandit results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: bandit
    
    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/docker
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: python

  # ==========================================
  # Dependency Scanning
  # ==========================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,analysis]"
        pip install safety pip-audit
    
    - name: Safety check
      run: |
        safety check --json --output safety-results.json
      continue-on-error: true
    
    - name: Pip-audit check
      run: |
        pip-audit --format=json --output=pip-audit-results.json
      continue-on-error: true
    
    - name: OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          --output=osv-results.json
          --format=json
          ./
      continue-on-error: true
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-results.json
          pip-audit-results.json
          osv-results.json
        retention-days: 30

  # ==========================================
  # Container Security Scanning
  # ==========================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t pqc-scanner:security-test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pqc-scanner:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy
    
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      id: grype
      with:
        image: 'pqc-scanner:security-test'
        format: sarif
        output-file: grype-results.sarif
      continue-on-error: true
    
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: grype-results.sarif
        category: grype

  # ==========================================
  # Secret Scanning
  # ==========================================
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # ==========================================
  # License Compliance
  # ==========================================
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,analysis]"
        pip install pip-licenses licensecheck
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        
        # Check for prohibited licenses
        pip-licenses --format=plain | grep -E "(GPL|AGPL|LGPL)" && exit 1 || echo "No prohibited licenses found"
    
    - name: Upload license information
      uses: actions/upload-artifact@v4
      with:
        name: license-information
        path: |
          licenses.json
          licenses.csv
        retention-days: 90

  # ==========================================
  # Security Report Summary
  # ==========================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, container-scan, secret-scan, license-scan]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| SAST | ${{ needs.sast.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependencies | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Licenses | ${{ needs.license-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
    
    - name: Create security issue if failures
      if: ${{ needs.sast.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.container-scan.result == 'failure' }}
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security scan failures detected - ${new Date().toISOString().split('T')[0]}`,
            body: `Security scans have detected issues that require attention.\n\nScan Results:\n- SAST: ${{ needs.sast.result }}\n- Dependencies: ${{ needs.dependency-scan.result }}\n- Container: ${{ needs.container-scan.result }}\n- Secrets: ${{ needs.secret-scan.result }}\n- Licenses: ${{ needs.license-scan.result }}\n\nPlease review the security tab for detailed findings.`,
            labels: ['security', 'high-priority']
          });